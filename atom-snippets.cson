# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
'.source.js':
  'import':
    'prefix': 'imp'
    'body': 'import $1 from \'$2\';$3'
  'import-domain':
    'prefix': 'impd'
    'body': 'import $1 from \'@domain-group/${2:fe-co-}$3\';$4'
  'import-react':
    'prefix': 'impr'
    'body': 'import React from \'react\';\nimport PropTypes from \'prop-types\';'
  'import-prop-types':
    'prefix': 'impt'
    'body': 'import PropTypes from \'prop-types\';'
  'import-react-dom':
    'prefix': 'imprd'
    'body': 'import ReactDOM from \'react-dom\';'
  'import-lodash':
    'prefix': 'impl'
    'body': 'import $1 from \'lodash/$1\';'
  'require':
    'prefix': 'req'
    'body': 'const ${1}${2} = require(\'${3:$1}$4\');$5'
  'react-prop-type':
    'prefix': 'pt'
    'body': 'PropTypes.'
  'react-prop-type-func':
    'prefix': 'ptf'
    'body': 'PropTypes.func'
  'react-prop-type-bool':
    'prefix': 'ptb'
    'body': 'PropTypes.bool'
  'react-prop-type-node':
    'prefix': 'ptn'
    'body': 'PropTypes.node'
  'react-prop-type-string':
    'prefix': 'pts'
    'body': 'PropTypes.string'
  'react-prop-type-shape':
    'prefix': 'ptsh'
    'body': 'PropTypes.shape({$1})'
  'react-prop-type-oneof':
    'prefix': 'pto'
    'body': 'PropTypes.oneOfType([ $1 ])'
  'jsx-attribute':
    'prefix': 'at'
    'body': '$1={$2}'
  'react-component':
    'prefix': 'comp'
    'body': """class $1 extends React.PureComponent {
      static propTypes = {

      };

      static defaultProps = {

      };

      render() {
        $2
      }
    }

    export default $1;"""
  'react-component-function':
    'prefix': 'compf'
    'body': """const $1 = (${2:\\{ $3 \\}}) => {
      $4
    };

    $1.propTypes = {

    };

    $1.defaultProps = {

    };
    """
  'stateless-function-prop-types':
    'prefix': 'fpt'
    'body': """$1.propTypes = {
      $2
    };"""
  'react-function-default-props':
    'prefix': 'fdp'
    'body': """$1.defaultProps = {
      $2
    };"""
  'react-class-default-props':
    'prefix': 'cdp'
    'body': """static defaultProps = {
      $2
    };"""
  'export-default':
    'prefix': 'expd'
    'body': 'export default $1;'
  'mocha-test':
    'prefix': 'it'
    'body': """
    it('$1', () => {
      $2
    });"""
  'mocha-module':
    'prefix': 'describe'
    'body': """
    describe('$1', () => {
      $2
    });
    """
  'jest-test':
    'prefix': 'test'
    'body': """
    test('$1', () => {
      $2
    });
    """
  'bind-method':
    'prefix': 'bindm'
    'body': "this.$1 = this.$1.bind(this);"
  'react-component-constructor':
    'prefix': 'rcons'
    'body': """
    constructor(props) {
      super(props);
      $1
    }

    """
  'icon':
    'prefix': 'icon'
    'body': '<Icon name="$1" size="$2" />$3'
'.source.scss':
  'rc-animate-transition':
    'prefix': 'rc-anim'
    'body': """.$1 {
      &-enter {
        // Start state

        &-active {
          // End state
        }
      }

      &-leave {
        // End state

        &-active {
          // Start state
        }
      }
    }
    """
  'import':
    'prefix': 'imp'
    'body': '@import \'$1\';$2'
  'import-domain':
    'prefix': 'impd'
    'body': '@import \'@domain-group/$1/lib/scss/$1\';$2'
  'import-local-component':
    'prefix': 'impl'
    'body': '@import \'$1/$1\';$2'
  'import-fe-brary':
    'prefix': 'impfe'
    'body': """
    ${1:@import '@domain-group/fe-brary/fe-brary-theme-$2';}
    @import '@domain-group/fe-brary/fe-brary';$3
    """
'.source.gfm':
  'proptypes-table':
    'prefix': 'props'
    'body': """Prop | Type | Default | Description | Required
    ---- | ---- | ------- | ----------- | --------
    """
'.source.json':
  'package-json-version':
    'prefix': 'version'
    'body': '"version": "version-changelog && changelog-verify && git add CHANGELOG.md",'
